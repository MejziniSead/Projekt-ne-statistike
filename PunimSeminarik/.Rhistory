m2 = lm(Displacement~Cylinders);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Q-Q plot
qqplot(Cylinders,Displacement);
m2 = lm(Displacement~Cylinders);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Q-Q plot
qqplot(Cylinders,Displacement);
s = summary(data);
attach(data);
s = summary(data);
s = summary(data);
s
s = summary(data);
s[1]
s = summary(data);
s[2]
ena bazike
s = summary(data);
s[[1]]
s = summary(data);
as.numeric(s[1][[1]]);
as.numeric(s[1]);
summary(data[1])
counter = 1;
while(counter<=8){
names(data[counter]) = summary(data[counter]);
counter = counter+1;
}
counter = 1;
while(counter<=8){
stemp = summary(data[counter]);
if(counter>1){
temp = cbind(temp,stemp);
}else{
temp = stemp;
}
counter = counter+1;
}
counter = 1;
stemp;
while(counter<=8){
stemp = summary(data[counter]);
if(counter>1){
temp = cbind(temp,stemp);
}else{
temp = stemp;
}
counter = counter+1;
}
print(stemp);
counter = 1;
temp;
while(counter<=8){
stemp = summary(data[counter]);
if(counter>1){
temp = cbind(temp,stemp);
}else{
temp = stemp;
}
counter = counter+1;
}
print(temp);
`names<-`(x,12)
`names<-`(x,1)
`names<-`(y,1)
a = c(10,11)
`names<-`(a,2)
z = `names<-`(a,2)
z[1]
z[[1]]
names(z[1])
counter = 1;
temp;
while(counter<=8){
#x = `names<-`(n,counter);
n[counter] = summary(data[counter]);
if(counter>1){
temp = cbind(temp,n[counter]);
}else{
temp = n[1];
}
counter = counter+1;
}
print(temp);
counter = 1;
temp;
while(counter<=8){
#x = `names<-`(n,counter);
n[counter] = summary(data[counter]);
if(counter>1){
temp = cbind(temp,n[counter]);
}else{
temp = n[1];
}
counter = counter+1;
}
print(temp);
counter = 1;
temp;
x;
while(counter<=8){
x[counter] = `names<-`(n,counter);
x[counter] = summary(data[counter]);
if(counter>1){
temp = cbind(temp,x[counter]);
}else{
temp = n[1];
}
counter = counter+1;
}
print(temp);
s = summary(data);
s
summary(data);
summary(data);
summary(data);
summary(data);
summary(data);
summary(data);
summary(data);
#leximi i datasetit
data = read.csv("vetura.csv");
attach(data);
# karakteristikat
n = names(data);
print(n)
#numri i karakteristikave
l = length(data)
print(l)
#numri i rreshtave
n = length(data$MPG)
#te dhena bazike
summary(data);
#varianca,devijimi standard, frekuenca relative dhe komulative
counter = 1;
while (counter <= 6) {
temp = as.numeric(data[counter][[1]]);
print(names(data[counter]))
if(counter==2){
x = table(temp);
}else{
dist = max(temp)-min(temp);
range = floor(sqrt(n));
mod = dist%%range;
a = dist + (range-mod);
range = a/range;
x = table(cut(temp,breaks = seq(min(temp),max(temp)+range,range),right = FALSE));
}
Frekuenca = x;
Frekuenca_relative = x/n;
Frekuenca_komulative = cumsum(x);
Perqindja_komulative = cumsum(x/n);
print(paste("Varianca",var(temp),sep = " "))
print(paste("Devijimi standard",sd(temp),sep = " "))
print("-----------------------------------------------------------------------------------");
print(cbind(Frekuenca,Frekuenca_relative,Frekuenca_komulative,Perqindja_komulative))
print("-----------------------------------------------------------------------------------")
counter = counter+1;
}
#Regresion linear i njefisht ndermjet 'Horsepower' dhe 'Displacement' ('kuaj fuqi' dhe 'vëllimi i cilindrit të motorit')
m1 = lm(Horsepower~Displacement);
summary(m1);
#Intervali i konfidences.
c = confint(m1);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Displacement, y = Horsepower,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#2 Komandat e meposhtme te komentuara kryjen punen e njejte sikurse linja e mesiperme e kodit
#plot(Displacement,Horsepower)
#abline(m1)
#Q-Q plot
qqplot(Displacement, Horsepower);
#Regresion linear i njefisht ndermjet 'Displacement' dhe 'Cylinders' ('vëllimi i cilindrit të motorit'dhe 'Cilindri')
m2 = lm(Displacement~Cylinders);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Q-Q plot
qqplot(Cylinders,Displacement);
#librarit e perdorura
library(tidyverse);
library(ggplot2);
library(ggpubr);
#leximi i datasetit
data = read.csv("vetura.csv");
attach(data);
# karakteristikat
n = names(data);
print(n)
#numri i karakteristikave
l = length(data)
print(l)
#numri i rreshtave
n = length(data$MPG)
#te dhena bazike
summary(data);
#varianca,devijimi standard, frekuenca relative dhe komulative
counter = 1;
while (counter <= 6) {
temp = as.numeric(data[counter][[1]]);
print(names(data[counter]))
if(counter==2){
x = table(temp);
}else{
dist = max(temp)-min(temp);
range = floor(sqrt(n));
mod = dist%%range;
a = dist + (range-mod);
range = a/range;
x = table(cut(temp,breaks = seq(min(temp),max(temp)+range,range),right = FALSE));
}
Frekuenca = x;
Frekuenca_relative = x/n;
Frekuenca_komulative = cumsum(x);
Perqindja_komulative = cumsum(x/n);
print(paste("Varianca",var(temp),sep = " "))
print(paste("Devijimi standard",sd(temp),sep = " "))
print("-----------------------------------------------------------------------------------");
print(cbind(Frekuenca,Frekuenca_relative,Frekuenca_komulative,Perqindja_komulative))
print("-----------------------------------------------------------------------------------")
counter = counter+1;
}
#Regresion linear i njefisht ndermjet 'Horsepower' dhe 'Displacement' ('kuaj fuqi' dhe 'vëllimi i cilindrit të motorit')
m1 = lm(Horsepower~Displacement);
summary(m1);
#Intervali i konfidences.
c = confint(m1);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Displacement, y = Horsepower,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#2 Komandat e meposhtme te komentuara kryjen punen e njejte sikurse linja e mesiperme e kodit
#plot(Displacement,Horsepower)
#abline(m1)
#Q-Q plot
qqplot(Displacement, Horsepower);
#Regresion linear i njefisht ndermjet 'Displacement' dhe 'Cylinders' ('vëllimi i cilindrit të motorit'dhe 'Cilindri')
m2 = lm(Displacement~Cylinders);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Q-Q plot
qqplot(Cylinders,Displacement);
#librarit e perdorura
library(tidyverse);
library(ggplot2);
library(ggpubr);
#leximi i datasetit
data = read.csv("vetura.csv");
attach(data);
# karakteristikat
n = names(data);
print(n)
#numri i karakteristikave
l = length(data)
print(l)
#numri i rreshtave
n = length(data$MPG)
#te dhena bazike
summary(data);
#varianca,devijimi standard, frekuenca relative dhe komulative
counter = 1;
while (counter <= 6) {
temp = as.numeric(data[counter][[1]]);
print(names(data[counter]))
if(counter==2){
x = table(temp);
}else{
dist = max(temp)-min(temp);
range = floor(sqrt(n));
mod = dist%%range;
a = dist + (range-mod);
range = a/range;
x = table(cut(temp,breaks = seq(min(temp),max(temp)+range,range),right = FALSE));
}
Frekuenca = x;
Frekuenca_relative = x/n;
Frekuenca_komulative = cumsum(x);
Perqindja_komulative = cumsum(x/n);
print(paste("Varianca",var(temp),sep = " "))
print(paste("Devijimi standard",sd(temp),sep = " "))
print("-----------------------------------------------------------------------------------");
print(cbind(Frekuenca,Frekuenca_relative,Frekuenca_komulative,Perqindja_komulative))
print("-----------------------------------------------------------------------------------")
counter = counter+1;
}
#Regresion linear i njefisht ndermjet 'Horsepower' dhe 'Displacement' ('kuaj fuqi' dhe 'vëllimi i cilindrit të motorit')
m1 = lm(Horsepower~Displacement);
summary(m1);
#Intervali i konfidences.
c = confint(m1);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Displacement, y = Horsepower,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#2 Komandat e meposhtme te komentuara kryjen punen e njejte sikurse linja e mesiperme e kodit
#plot(Displacement,Horsepower)
#abline(m1)
#Q-Q plot
qqplot(Displacement, Horsepower);
#Regresion linear i njefisht ndermjet 'Displacement' dhe 'Cylinders' ('vëllimi i cilindrit të motorit'dhe 'Cilindri')
m2 = lm(Displacement~Cylinders);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Q-Q plot
qqplot(Cylinders,Displacement);
#Regresion linear i shumefishte ndermjet 'Displacement' dhe 'Cylinders' ('vëllimi i cilindrit të motorit'dhe 'Cilindri')
m2 = lm(Displacement~Cylinders);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=x");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Q-Q plot
qqplot(Cylinders,Displacement);
qqline(Cylinders,Displacement);
cor(data[1:6])
m2 = lm(MPG~Cylinders+Displacement+Horsepower+Weight);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
m2 = lm(MPG~Acceleration+Horsepower+Weight);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
m2 = lm(Horsepower~Cylinders+Weight+Displacement);
summary(m2);
m2 = lm(Horsepower~Cylinders+Weight+Displacement);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
c[1]
c[2]
n = names(data);
n = names(data);
print(n)
l = length(data)
print(l)
counter = 1;
temp = as.numeric(data[counter][[1]]);
temp
print(names(data[counter]))
counter = 1;
while (counter <= 6) {
temp = as.numeric(data[counter][[1]]);
print(names(data[counter]))
if(counter==2){
x = table(temp);
}else{
dist = max(temp)-min(temp);
range = floor(sqrt(n));
mod = dist%%range;
a = dist + (range-mod);
range = a/range;
x = table(cut(temp,breaks = seq(min(temp),max(temp)+range,range),right = FALSE));
}
Frekuenca = x;
Frekuenca_relative = x/n;
Frekuenca_komulative = cumsum(x);
Perqindja_komulative = cumsum(x/n);
print(paste("Varianca",var(temp),sep = " "))
print(paste("Devijimi standard",sd(temp),sep = " "))
print("-----------------------------------------------------------------------------------");
print(cbind(Frekuenca,Frekuenca_relative,Frekuenca_komulative,Perqindja_komulative))
print("-----------------------------------------------------------------------------------")
counter = counter+1;
}
n = length(data$MPG)
counter = 1;
while (counter <= 6) {
temp = as.numeric(data[counter][[1]]);
print(names(data[counter]))
if(counter==2){
x = table(temp);
}else{
dist = max(temp)-min(temp);
range = floor(sqrt(n));
mod = dist%%range;
a = dist + (range-mod);
range = a/range;
x = table(cut(temp,breaks = seq(min(temp),max(temp)+range,range),right = FALSE));
}
Frekuenca = x;
Frekuenca_relative = x/n;
Frekuenca_komulative = cumsum(x);
Perqindja_komulative = cumsum(x/n);
print(paste("Varianca",var(temp),sep = " "))
print(paste("Devijimi standard",sd(temp),sep = " "))
print("-----------------------------------------------------------------------------------");
print(cbind(Frekuenca,Frekuenca_relative,Frekuenca_komulative,Perqindja_komulative))
print("-----------------------------------------------------------------------------------")
counter = counter+1;
}
m1 = lm(Horsepower~Displacement);
summary(m1);
c = confint(m1);
c
#Funksioni i vijes se regresionit
b = round((c[1]+c[3])/2,4);
k = round((c[2]+c[4])/2,4);
funksioni = paste("y=",b,"+",k,"*x");
m2 = lm(Horsepower~Cylinders+Weight+Displacement);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
m2 = lm(MPG~Horsepower+Weight);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
b = round((c[1]+c[4])/2,4);
b
m2 = lm(MPG~Horsepower+Weight);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b0 = round((c[1]+c[4])/2,4);
b1 = round((c[2]+c[5])/2,4);
b2 = round((c[3]+c[6])/2,4);
funksioni = paste("y=",b0,"+",b1,"*x1","+",b2,"*x2");
#Scatter plot
ggplot(data, aes(x = Cylinders,y = Displacement,alpha = 0.8)) + geom_point()+geom_smooth(method = lm) +ggtitle(funksioni);
#Regresion linear i shumefishte ndermjet 'Horsepower' dhe 'Cylinders+Weight+Displacement'  ('MPG' dhe 'cilindri+pesha+vëllimi i cilindrit të motorit')
m2 = lm(Horsepower~Cylinders+Weight+Displacement);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b0 = round((c[1]+c[5])/2,4);
b1 = round((c[2]+c[6])/2,4);
b2 = round((c[3]+c[7])/2,4);
b2 = round((c[4]+c[8])/2,4);
funksioni = paste("Funksioni: ","y=",b0,"+",b1,"*x1","+",b2,"*x2","+",b3,"*x3");
print(funksioni);
#endofscript
#Regresion linear i shumefishte ndermjet 'Horsepower' dhe 'Cylinders+Weight+Displacement'  ('MPG' dhe 'cilindri+pesha+vëllimi i cilindrit të motorit')
m2 = lm(Horsepower~Cylinders+Weight+Displacement);
summary(m2);
#Intervali i konfidences.
c = confint(m2);
c
#Funksioni i vijes se regresionit
b0 = round((c[1]+c[5])/2,4);
b1 = round((c[2]+c[6])/2,4);
b2 = round((c[3]+c[7])/2,4);
b3 = round((c[4]+c[8])/2,4);
funksioni = paste("Funksioni: ","y=",b0,"+",b1,"*x1","+",b2,"*x2","+",b3,"*x3");
print(funksioni);
#endofscript
